package mygame;
/*
Asad Jiwani & Edward Wang
April 2nd 2021
This is a GUI for the game's settings screen
 */
import com.jme3.math.ColorRGBA;

public class SettingsWindow extends javax.swing.JFrame {

    //create global variable for the crosshair index
    static int crosshairIndex;
    //create global variables for the colors that the user chose
    static ColorRGBA backgroundColor, targetColor, crosshairColor;
    static int backgroundR, backgroundG, backgroundB,
                targetR, targetG, targetB,
                crosshairR, crosshairG, crosshairB;
    static double  backgroundA = 0.3, targetA = 0.3, crosshairA = 0.3; 
    //create an intro window variable
    private IntroWindow intro;
    /**
     * Creates new form SettingsWindow
     * @param i - The intro screen for the game
     */
    public SettingsWindow(IntroWindow i) {
        initComponents();
        intro = i;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        txtFieldSensitivity = new javax.swing.JTextField();
        txtFieldBackgroundColor = new javax.swing.JTextField();
        txtFieldTargetColor = new javax.swing.JTextField();
        txtFieldCrosshairColor = new javax.swing.JTextField();
        btnApply = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        comboBoxCrosshairShape = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel1.setText("Setting");

        jLabel2.setFont(new java.awt.Font("Sylfaen", 2, 14)); // NOI18N
        jLabel2.setText("Sensitivity");

        jLabel3.setFont(new java.awt.Font("Sylfaen", 2, 14)); // NOI18N
        jLabel3.setText("Background Color");

        jLabel4.setFont(new java.awt.Font("Sylfaen", 2, 14)); // NOI18N
        jLabel4.setText("Target Color");

        jLabel5.setFont(new java.awt.Font("Sylfaen", 2, 14)); // NOI18N
        jLabel5.setText("Crosshair Shape");

        jLabel6.setFont(new java.awt.Font("Sylfaen", 2, 14)); // NOI18N
        jLabel6.setText("Crosshair Color");

        jLabel7.setText("Press Apply to save changes");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel8.setText("Current");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel9.setText("New");

        jLabel10.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel10.setText("4");

        jLabel11.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel11.setText("[255,255,255]");

        jLabel12.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel12.setText("[57,255,20]");

        jLabel13.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel13.setText("+");

        jLabel14.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel14.setText("[0,0,0]");

        jLabel15.setText("Use mouse-sensitivity.com to convert sensitivity between games");

        jLabel16.setText("Press Back to discard unsaved changes/exit");

        txtFieldSensitivity.setEditable(false);
        txtFieldSensitivity.setText("4");
        txtFieldSensitivity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFieldSensitivityActionPerformed(evt);
            }
        });

        txtFieldBackgroundColor.setBackground(new java.awt.Color(204, 204, 255));
        txtFieldBackgroundColor.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N

        txtFieldTargetColor.setBackground(new java.awt.Color(204, 204, 255));
        txtFieldTargetColor.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N

        txtFieldCrosshairColor.setBackground(new java.awt.Color(204, 204, 255));
        txtFieldCrosshairColor.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N

        btnApply.setBackground(new java.awt.Color(204, 255, 204));
        btnApply.setFont(new java.awt.Font("Tw Cen MT", 1, 14)); // NOI18N
        btnApply.setText("Apply");
        btnApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyActionPerformed(evt);
            }
        });

        btnBack.setBackground(new java.awt.Color(204, 255, 204));
        btnBack.setFont(new java.awt.Font("Tw Cen MT", 1, 14)); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 51, 51));
        jLabel17.setText("Settings!!");

        jLabel18.setText("For all color settings, enter values seperated by a space. Ex. 255 255 255");

        comboBoxCrosshairShape.setBackground(new java.awt.Color(204, 204, 255));
        comboBoxCrosshairShape.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "+", "o" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                        .addComponent(btnApply)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBack))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel17)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(26, 26, 26)
                                                .addComponent(jLabel10))
                                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(31, 31, 31)
                                                .addComponent(jLabel13))
                                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(11, 11, 11)
                                                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jLabel8))
                                        .addGap(71, 71, 71)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addComponent(txtFieldSensitivity, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtFieldBackgroundColor, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtFieldTargetColor, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtFieldCrosshairColor, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(comboBoxCrosshairShape, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addComponent(jLabel15)
                            .addComponent(jLabel7)
                            .addComponent(jLabel18))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jLabel17)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel10)
                    .addComponent(txtFieldSensitivity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel11)
                    .addComponent(txtFieldBackgroundColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFieldTargetColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel13)
                    .addComponent(comboBoxCrosshairShape, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel14)
                    .addComponent(txtFieldCrosshairColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(btnApply)
                    .addComponent(btnBack))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtFieldSensitivityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFieldSensitivityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFieldSensitivityActionPerformed

    private void btnApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyActionPerformed
        //apply settings
        //create variables for all setting attributes
        String sBackgroundColor, sTargetColor, sCrosshairColor;
        String[] backgroundColors, targetColors, crosshairColors;
        
        
        
        //get background color as a String
        sBackgroundColor = txtFieldBackgroundColor.getText();
        //use the split method and get all 3 rgb values in the String color variable
        //use an array to hold each rgb value
        backgroundColors = sBackgroundColor.split(" ");
        //assign all 3 rgb values to individual variables
        backgroundR = Integer.parseInt(backgroundColors[0]);
        backgroundG = Integer.parseInt(backgroundColors[1]);
        backgroundB = Integer.parseInt(backgroundColors[2]);
        //error check user input
        //if user entered an incorrect value, set value to 255
        if(backgroundR < 0 || backgroundR > 255){
            backgroundR = 255;
        }if(backgroundG < 0 || backgroundG > 255){
            backgroundG = 255;
        }if(backgroundB < 0 || backgroundB > 255){
            backgroundB = 255;
        }
        //create an RGBA background color
        backgroundColor = new ColorRGBA(backgroundR, backgroundG, backgroundB, (float)backgroundA);
        //get target color as a String
        sTargetColor = txtFieldTargetColor.getText();
        //use the split method and get all 3 rgb values in the String color variable
        //use an array to hold each rgb value
        targetColors = sTargetColor.split(" ");
        //assign all 3 rgb values to individual variables
        targetR = Integer.parseInt(targetColors[0]);
        targetG = Integer.parseInt(targetColors[1]);
        targetB = Integer.parseInt(targetColors[2]);
        //error check user input
        //if user entered an incorrect value, set value to 255
        if(targetR < 0 || targetR > 255){
            targetR = 255;
        }if(targetG < 0 || targetG > 255){
            targetG = 255;
        }if(targetB < 0 || targetB > 255){
            targetB = 255;
        }
        //create an RGBA target color
        targetColor = new ColorRGBA(targetR, targetG, targetB, (float)targetA);
        //get crosshair color as a String
        sCrosshairColor = txtFieldCrosshairColor.getText();
        //use the split method and get all 3 rgb values in the String color variable
        //use an array to hold each rgb value
        crosshairColors = sCrosshairColor.split(" ");
        //assign all 3 rgb values to individual variables
        crosshairR = Integer.parseInt(crosshairColors[0]);
        crosshairG = Integer.parseInt(crosshairColors[1]);
        crosshairB = Integer.parseInt(crosshairColors[2]);
        //error check user input
        //if user entered an incorrect value, set value to 255
        if(crosshairR < 0 || crosshairR > 255){
            crosshairR = 255;
        }if(crosshairG < 0 || crosshairG > 255){
            crosshairG = 255;
        }if(crosshairB < 0 || crosshairB > 255){
            crosshairB = 255;
        }
        //create an RGBA crosshair color
        crosshairColor = new ColorRGBA(crosshairR, crosshairG, crosshairB, (float)crosshairA);
        for (int i = 0; i < 3; i++) {
            System.out.println(backgroundColors[i] + " " + targetColors[i] + " " + crosshairColors[i]);
        }
        //get the index of the shape that the user selected for the crosshair
        //index 0 is + and index 1 is o
        crosshairIndex = comboBoxCrosshairShape.getSelectedIndex();
    }//GEN-LAST:event_btnApplyActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed

        //set the intro window to be visible
        intro.setVisible(true);
        //hide this window
        this.setVisible(false);
    }//GEN-LAST:event_btnBackActionPerformed

    /**
     * Get the crosshair index that the user choose in the combo box
     * @return the crosshair index that the user choose in the combo box
     */
    public static int getCrosshairIndex(){
            return crosshairIndex;
    }
    
    /**
     * Get the r value for the background color the user chose
     * @return the r value for the background color the user chose
     */
    public static int getBR(){
        return backgroundR;
    }
    
    /**
     * Get the g value for the background color the user chose
     * @return the g value for the background color the user chose
     */
    public static int getBG(){
        return backgroundG;
    }
    
    /**
     * Get the b value for the background color the user chose
     * @return the b value for the background color the user chose
     */
    public static int getBB(){
        return backgroundB;
    }
    
    /**
     * Get the a value for the background color the user chose
     * @return the a value for the background color the user chose
     */
    public static double getBA(){
        return backgroundA;
    }
    
    /**
     * Get the r value for the target color the user chose
     * @return the r value for the target color the user chose
     */
    public static int getTR(){
        return targetR;
    }
    
    /**
     * Get the g value for the target color the user chose
     * @return the g value for the target color the user chose
     */
    public static int getTG(){
        return targetG;
    }
    
    /**
     * Get the b value for the target color the user chose
     * @return the b value for the target color the user chose
     */
    public static int getTB(){
        return targetB;
    }
    
    /**
     * Get the a value for the target color the user chose
     * @return the a value for the target color the user chose
     */
    public static double getTA(){
        return targetA;
    }
    
    /**
     * Get the r value for the crosshair color the user chose
     * @return the r value for the crosshair color the user chose
     */
    public static int getCR(){
        return crosshairR;
    }
    
    /**
     * Get the g value for the crosshair color the user chose
     * @return the g value for the crosshair color the user chose
     */
    public static int getCG(){
        return crosshairG;
    }
    
    /**
     * Get the b value for the crosshair color the user chose
     * @return the b value for the crosshair color the user chose
     */
    public static int getCB(){
        return crosshairB;
    }
    
    /**
     * Get the a value for the crosshair color the user chose
     * @return the a value for the crosshair color the user chose
     */
    public static double getCA(){
        return crosshairA;
    }
    
    
    /**
     * Get the color that the user chose for the targets
     * @return the color that the user chose for the targets
     */
    public static ColorRGBA getTargetColor(){
        return targetColor;
    }
    
    /**
     * Get the color that the user chose for the crosshair
     * @return the color that the user chose for the crosshair
     */
    public static ColorRGBA getCrosshairColor(){
        return crosshairColor;
    }
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApply;
    private javax.swing.JButton btnBack;
    private javax.swing.JComboBox<String> comboBoxCrosshairShape;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField txtFieldBackgroundColor;
    private javax.swing.JTextField txtFieldCrosshairColor;
    private javax.swing.JTextField txtFieldSensitivity;
    private javax.swing.JTextField txtFieldTargetColor;
    // End of variables declaration//GEN-END:variables
}
